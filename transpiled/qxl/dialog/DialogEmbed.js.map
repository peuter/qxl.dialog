{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.dialog/qxl.dialog/source/class/qxl/dialog/DialogEmbed.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "container",
    "Composite",
    "include",
    "qxl",
    "dialog",
    "MDialog",
    "statics",
    "getInstanceByType",
    "construct",
    "properties",
    "setLayout",
    "layout",
    "Grow",
    "_createWidgetContent",
    "set",
    "setMessage",
    "core",
    "Init",
    "getApplication",
    "getRoot",
    "addListener",
    "_handleEscape",
    "form",
    "message",
    "formData",
    "callback",
    "context",
    "caption",
    "Assert",
    "assertMap",
    "FormEmbed",
    "allowCancel",
    "DialogEmbed"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,EAAAA,EAAE,CAACC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC;;AAAA;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;AAYAH,EAAAA,EAAE,CAACI,KAAH,CAASC,MAAT,CAAgB,wBAAhB;AACEC,IAAAA,MAAM,EAAEN,EAAE,CAACO,EAAH,CAAMC,SAAN,CAAgBC,SAD1B;AAEEC,IAAAA,OAAO,EAAE,CAAEC,GAAG,CAACC,MAAJ,CAAWC,OAAb,CAFX;AAIEC,IAAAA,OAAO,EAAE;AACP;;;;;AAKAC,MAAAA,iBAAiB,EAAEJ,GAAG,CAACC,MAAJ,CAAWC,OAAX,CAAmBE;AAN/B,KAJX;;AAaE;;;;;;AAMAC,IAAAA,SAAS,EAAE,mBAASC,UAAT,EAAqB;AAC9B;AACA,WAAKC,SAAL,CAAe,IAAIlB,EAAE,CAACO,EAAH,CAAMY,MAAN,CAAaC,IAAjB,EAAf;;AACA,WAAKC,oBAAL,CAA0BJ,UAA1B,EAH8B,CAK9B;;;AACA,UAAI,QAAOA,UAAP,KAAqB,QAAzB,EAAmC;AACjC,aAAKK,GAAL,CAASL,UAAT;AACD,OAFD,MAEO,IAAI,OAAOA,UAAP,IAAqB,QAAzB,EAAmC;AACxC,aAAKM,UAAL,CAAgBN,UAAhB;AACD,OAV6B,CAW9B;;;AACAjB,MAAAA,EAAE,CAACwB,IAAH,CAAQC,IAAR,CAAaC,cAAb,GAA8BC,OAA9B,GAAwCC,WAAxC,CAAoD,OAApD,EAA6D,KAAKC,aAAlE,EAAiF,IAAjF;AACD;AAhCH,gBAmCE;AACE;;;;;;;;;AASAC,IAAAA,IAAI,EAAE,cAASC,OAAT,EAAkBC,QAAlB,EAAqE;AAAA,UAAzCC,QAAyC,uEAAhC,IAAgC;AAAA,UAA1BC,OAA0B,uEAAlB,IAAkB;AAAA,UAAZC,OAAY,uEAAJ,EAAI;AACzEnC,MAAAA,EAAE,CAACwB,IAAH,CAAQY,MAAR,CAAeC,SAAf,CAAyBL,QAAzB;AACA,aAAO,IAAIrB,GAAG,CAACC,MAAJ,CAAW0B,SAAf,CAAyB;AAACP,QAAAA,OAAO,EAAPA,OAAD;AAAUC,QAAAA,QAAQ,EAARA,QAAV;AAAoBO,QAAAA,WAAW,EAAE,IAAjC;AAAuCN,QAAAA,QAAQ,EAARA,QAAvC;AAAiDC,QAAAA,OAAO,EAAPA;AAAjD,OAAzB,CAAP;AACD;AAbH,GAnCF;AA5BAvB,EAAAA,GAAG,CAACC,MAAJ,CAAW4B,WAAX,CAAuBrC,aAAvB,GAAuCA,aAAvC",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo dialog library\n   https://github.com/qooxdoo/qxl.dialog\n\n   Copyright:\n     2007-2019 Christian Boulanger and others\n\n   License:\n     LGPL: http://www.gnu.org/licenses/lgpl.html\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\n\n/**\n * Base class for dialog widgets\n * @ignore(qxl.dialog.alert)\n * @ignore(qxl.dialog.error)\n * @ignore(qxl.dialog.warning)\n * @ignore(qxl.dialog.confirm)\n * @ignore(qxl.dialog.prompt)\n * @ignore(qxl.dialog.form)\n * @ignore(qxl.dialog.select)\n * @ignore(Promise)\n *\n */\nqx.Class.define(\"qxl.dialog.DialogEmbed\", {\n  extend: qx.ui.container.Composite,\n  include: [ qxl.dialog.MDialog ],\n  \n  statics: {\n    /**\n     * Returns a dialog instance by type\n     * @param type {String} The dialog type to get\n     * @return {qxl.dialog.Dialog}\n     */\n    getInstanceByType: qxl.dialog.MDialog.getInstanceByType\n  },\n\n  /**\n   * Constructor\n   * @param properties {Map|String|undefined} If you supply a map, all the\n   * corresponding properties will be set. If a string is given, use it\n   * as to set the 'message' property.\n   */\n  construct: function(properties) {\n    this.base(arguments);\n    this.setLayout(new qx.ui.layout.Grow());\n    this._createWidgetContent(properties);\n\n    // set properties from constructor param\n    if (typeof properties == \"object\") {\n      this.set(properties);\n    } else if (typeof properties == \"string\") {\n      this.setMessage(properties);\n    }\n    // escape key\n    qx.core.Init.getApplication().getRoot().addListener(\"keyup\", this._handleEscape, this);\n  },\n\n  statics :\n  {\n    /**\n     * Shortcut for form dialog. Cannot be reused.\n     * @param message {String} The message to display\n     * @param formData {Map} Map of form data. See {@link qxl.dialog.Form.formData}\n     * @param callback {Function?} The callback function\n     * @param context {Object?} The context to use with the callback function\n     * @param caption {String?} The caption of the dialog window\n     * @return {qxl.dialog.Form} The widget instance\n     */\n    form: function(message, formData, callback=null, context=null, caption=\"\") {\n      qx.core.Assert.assertMap(formData);\n      return new qxl.dialog.FormEmbed({message, formData, allowCancel: true, callback, context});\n    }\n  }\n});\n"
  ]
}