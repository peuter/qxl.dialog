{
  "version": 3,
  "sources": [
    "/home/runner/work/qxl.dialog/qxl.dialog/source/class/qxl/dialog/MForm.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "properties",
    "_init",
    "allowBrowserAutocomplete",
    "check",
    "init",
    "formData",
    "nullable",
    "event",
    "apply",
    "model",
    "labelColumnWidth",
    "setupFormRendererFunction",
    "beforeFormFunction",
    "formReadyFunction",
    "afterFormFunction",
    "afterButtonsFunction",
    "members",
    "_formContainer",
    "_form",
    "_formValidator",
    "_formController",
    "_formElements",
    "getForm",
    "_createWidgetContent",
    "setSetupFormRendererFunction",
    "container",
    "ui",
    "Composite",
    "setLayout",
    "layout",
    "VBox",
    "hbox",
    "HBox",
    "add",
    "_message",
    "basic",
    "Label",
    "setRich",
    "setMinWidth",
    "setAllowStretchX",
    "flex",
    "bind",
    "context",
    "formTag",
    "qxl",
    "dialog",
    "FormTag",
    "Grow",
    "buttonPane",
    "_createButtonPane",
    "okButton",
    "_createOkButton",
    "cancelButton",
    "_createCancelButton",
    "_applyFormData",
    "old",
    "getModel",
    "removeAllBindings",
    "dispose",
    "e",
    "getValidationManager",
    "removeAll",
    "modelData",
    "Object",
    "getOwnPropertyNames",
    "key",
    "value",
    "undefined",
    "data",
    "marshal",
    "Json",
    "createModel",
    "setModel",
    "form",
    "Form",
    "getQxObject",
    "removeOwnedQxObject",
    "addOwnedQxObject",
    "controller",
    "_onFormReady",
    "f",
    "getFormReadyFunction",
    "call",
    "getContext",
    "addListenerOnce",
    "fieldData",
    "formElement",
    "type",
    "toLowerCase",
    "addGroupHeader",
    "TextArea",
    "setHeight",
    "lines",
    "setLiveUpdate",
    "TextField",
    "maxLength",
    "setMaxLength",
    "DateField",
    "dateFormat",
    "setDateFormat",
    "PasswordField",
    "getContentElement",
    "setAttribute",
    "ComboBox",
    "options",
    "forEach",
    "item",
    "listItem",
    "ListItem",
    "label",
    "icon",
    "SelectBox",
    "List",
    "RadioGroup",
    "orientation",
    "setUserData",
    "radioButton",
    "RadioButton",
    "CheckBox",
    "Spinner",
    "min",
    "setMinimum",
    "max",
    "setMaximum",
    "step",
    "setSingleStep",
    "fractionsDigits",
    "fd",
    "nf",
    "util",
    "format",
    "NumberFormat",
    "setMinimumFractionDigits",
    "setMaximumFractionDigits",
    "setNumberFormat",
    "selectionMode",
    "setSelectionMode",
    "dragSelection",
    "mode",
    "getSelectionMode",
    "debug",
    "setDragSelection",
    "error",
    "_this",
    "addTarget",
    "converter",
    "validate",
    "lang",
    "Function",
    "selected",
    "selectables",
    "getSelectables",
    "selectable",
    "getValue",
    "selection",
    "sValue",
    "getUserData",
    "Array",
    "includes",
    "push",
    "validator",
    "validation",
    "required",
    "setRequired",
    "Validate",
    "charAt",
    "regExp",
    "RegExp",
    "substr",
    "length",
    "errorMessage",
    "AsyncValidator",
    "Type",
    "isString",
    "proxy",
    "method",
    "replace",
    "eval",
    "warn",
    "message",
    "invalidMessage",
    "validationFunc",
    "validatorObj",
    "__asyncInProgress",
    "valid",
    "setValid",
    "tr",
    "width",
    "setWidth",
    "placeholder",
    "setPlaceholder",
    "toolTipText",
    "setToolTipText",
    "enabled",
    "setEnabled",
    "set",
    "getAllowBrowserAutocomplete",
    "userdata",
    "keys",
    "isObject",
    "events",
    "func",
    "Error",
    "addListener",
    "setQxObjectId",
    "setupFormRenderer",
    "getSetupFormRendererFunction",
    "view",
    "FormRenderer",
    "getLayout",
    "setColumnFlex",
    "setColumnMaxWidth",
    "getLabelColumnWidth",
    "setColumnWidth",
    "setAllowGrowX",
    "_applyLabelColumnWidth",
    "getChildren",
    "_okButton",
    "_handleOk",
    "hide",
    "getCallback",
    "Serializer",
    "toNativeObject",
    "resetCallback",
    "MForm"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo dialog library\n   https://github.com/qooxdoo/qxl.dialog\n\n   Copyright:\n     2007-2018 Christian Boulanger and others\n\n   License:\n     LGPL: http://www.gnu.org/licenses/lgpl.html\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n\n/**\n * Mixin that provides the functionality for a dialog with a form that\n * is constructed on-the-fly. Used by the Window-based dialog form,\n * and by an embedded dialog form\n *\n * @require(qxl.dialog.FormRenderer)\n * @require(qx.util.Serializer)\n * @require(qx.util.Validate)\n */\nqx.Mixin.define(\"qxl.dialog.MForm\", {\n  construct : function(properties) {\n    this._init();\n  },\n\n  properties: {\n    /**\n     * Allow disabling autocomplete on all text and password fields\n     */\n    allowBrowserAutocomplete :\n    {\n      check : \"Boolean\",\n      init  : true\n    },\n\n    /**\n     * Data to create a form with multiple fields.\n     * So far implemented:\n     *   TextField / TextArea\n     *   ComboBox\n     *   SelectBox\n     *   RadioGroup\n     *   CheckBox\n     *   Spinner\n     *   List\n     *\n     * <pre>\n     * {\n     *  \"username\" : {\n     *     'type'  : \"TextField\",\n     *     'label' : \"User Name\",\n     *     'value' : \"\"\n     *   },\n     *   \"address\" : {\n     *     'type'  : \"TextArea\",\n     *     'label' : \"Address\",\n     *     'lines' : 3\n     *   },\n     *   \"domain\" : {\n     *     'type'  : \"SelectBox\",\n     *     'label' : \"Domain\",\n     *     'value' : 1,\n     *     'options' : [\n     *       { 'label' : \"Company\", 'value' : 0 },\n     *       { 'label' : \"Home\",    'value' : 1 }\n     *     ]\n     *   },\n     *   \"commands\" : {\n     *    'type'  : \"ComboBox\",\n     *     'label' : \"Shell command to execute\",\n     *     'options' : [\n     *       { 'label' : \"ln -s *\" },\n     *       { 'label' : \"rm -Rf /\" }\n     *     ]\n     *   },\n     *   \"quantity\" : {\n     *    'type' : \"Spinner\",\n     *    'label' : \"How many?\",\n     *    'properties' : {\n     *      'minimum' : 1,\n     *      'maximum' : 20,\n     *      'maxWidth' : 100\n     *    }\n     *   }\n     * }\n     * </pre>\n     */\n    formData: {\n      check: \"Map\",\n      nullable: true,\n      event: \"changeFormData\",\n      apply: \"_applyFormData\"\n    },\n\n    /**\n     * The model of the result data\n     */\n    model: {\n      check: \"qx.core.Object\",\n      nullable: true,\n      event: \"changeModel\"\n    },\n\n    /**\n     * The default width of the column with the field labels\n     */\n    labelColumnWidth: {\n      check: \"Integer\",\n      nullable: false,\n      init: 100,\n      apply: \"_applyLabelColumnWidth\"\n    },\n\n    /**\n     * Function to call to create and configure a form renderer. If null, a\n     * single-column form renderer is automatically instantiated and\n     * configured. The function is passed a single argument, the form object.\n     */\n    setupFormRendererFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    },\n\n    /**\n     * Function to call just before creating the form's input fields. This\n     * allows additional, non-form widgets to be added. The function is called\n     * one two arguments: the container in which the form fields should be\n     * placed, and the form object itself (this).\n     */\n    beforeFormFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    },\n\n    /*\n     * Function to call with the internal form, allowing the user to do things\n     * such as set up a form validator (vs. field validators) on the form. The\n     * function is called with two arguments: the internal qx.ui.form.Form\n     * object, and the current dialog.Form object. An attempt is made to call\n     * the function in the context specified in the form data, but that may\n     * not work properly if the context property is not yet set at the time at\n     * the form is created.\n     */\n    formReadyFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null,\n      event : \"formReadyFunctionChanged\"\n    },\n\n    /**\n     * Function to call just after creating the form's input fields. This\n     * allows additional, non-form widgets to be added. The function is called\n     * one two arguments: the container in which the form fields should be\n     * placed, and the form object itself (this).\n     */\n    afterFormFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    },\n\n    /**\n     * Function to call just after creating the form's buttons. This allows\n     * additional, additional widgets to be added. The function is called with\n     * two arguments: the container in which the buttons were placed, and the\n     * form object itself (this).\n     */\n    afterButtonsFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    }\n  },\n\n  members: {\n    _formContainer: null,\n    _form: null,\n    _formValidator: null,\n    _formController: null,\n    _formElements : null,\n\n    _init : function() {\n      // Initialize form instances to an empty map which will be updated as\n      // formItems are added.  After the formData has been applied, this\n      // property will contain a map containing the form item instances, with\n      // the key being the name used in formData, and the value being the item\n      // element. In particular, the afterFormFunction, which receives the form\n      // as its second parameter, may reference this member to gain access to\n      // the form elements created for the form.\n      this._formElements = {};\n    },\n\n    /**\n     * Return the form\n     * @return {qx.ui.form.Form}\n     */\n    getForm: function () {\n      return this._form;\n    },\n\n    /**\n     * Create the main content of the widget\n     */\n    _createWidgetContent: function (properties) {\n      /*\n       * Handle properties that must be set before _applyFormData\n       */\n      if (properties.setupFormRendererFunction) {\n        this.setSetupFormRendererFunction(properties.setupFormRendererFunction);\n      }\n\n      let container = new qx.ui.container.Composite();\n      container.setLayout(new qx.ui.layout.VBox(10));\n\n      let hbox = new qx.ui.container.Composite();\n      hbox.setLayout(new qx.ui.layout.HBox(10));\n      container.add(hbox);\n      this._message = new qx.ui.basic.Label();\n      this._message.setRich(true);\n      this._message.setMinWidth(200);\n      this._message.setAllowStretchX(true);\n      hbox.add(this._message, {\n        flex: 1\n      });\n\n      /*\n       * If requested, call the before-form function to add some fields\n       */\n      if (typeof properties.beforeFormFunction == \"function\") {\n        properties.beforeFormFunction.bind(properties.context)(container, this);\n      }\n\n      // wrap fields in form tag to avoid Chrome warnings, see https://github.com/qooxdoo/qxl.dialog/issues/19\n      let formTag = new qxl.dialog.FormTag();\n      this._formContainer = new qx.ui.container.Composite();\n      this._formContainer.setLayout(new qx.ui.layout.Grow());\n      formTag.add(this._formContainer, {flex: 1});\n      container.add(formTag, { flex: 1 });\n\n      /*\n       * If requested, call the after-form function to add some fields\n       */\n      if (typeof properties.afterFormFunction == \"function\") {\n        properties.afterFormFunction.bind(properties.context)(container, this);\n      }\n\n      // buttons\n      let buttonPane = this._createButtonPane();\n      container.add(buttonPane);\n      let okButton = this._createOkButton();\n      buttonPane.add(okButton);\n      let cancelButton = this._createCancelButton();\n      buttonPane.add(cancelButton);\n\n      /*\n       * If requested, call the after-buttons function\n       */\n      if (typeof properties.afterButtonsFunction == \"function\") {\n        properties.afterButtonsFunction.bind(properties.context)(buttonPane, this);\n      }\n      this.add(container);\n    },\n\n    /**\n     * Constructs the form on-the-fly\n     * @param formData {Map} The form data map\n     * @param old {Map|null} The old value\n     * @lint ignoreDeprecated(alert,eval)\n     */\n    _applyFormData: function (formData, old) {\n      if (this._formController) {\n        try {\n          this.getModel().removeAllBindings();\n          this._formController.dispose();\n        } catch (e) {\n        }\n      }\n      if (this._form) {\n        try {\n          this._form.getValidationManager().removeAllBindings();\n          this._form.dispose();\n        } catch (e) {\n        }\n      }\n      this._formContainer.removeAll();\n      if (!formData) {\n        return;\n      }\n      if (this.getModel()) {\n        this.getModel().removeAllBindings();\n        this.getModel().dispose();\n      }\n      let modelData = {};\n      for (let key of Object.getOwnPropertyNames(formData)) {\n        modelData[key] = formData[key].value !== undefined ?\n        formData[key].value :\n        null;\n      }\n      let model = qx.data.marshal.Json.createModel(modelData);\n      this.setModel(model);\n      // form\n      this._form = new qx.ui.form.Form();\n      if (qx.core.Environment.get(\"module.objectid\") === true) {\n        if (this.getQxObject(\"form\")) {\n          this.removeOwnedQxObject(\"form\");\n        }\n        this.addOwnedQxObject(this._form, \"form\");\n      }\n      this._formController = new qx.data.controller.Object(this.getModel());\n      this._onFormReady(this._form);\n\n      /*\n       * hooks for subclasses or users to do something with the new form\n       */\n      this._onFormReady( this._form );\n      let f = this.getFormReadyFunction();\n      if (f) {\n        f.call(this.getContext(), this._form, this);\n      } else {\n        this.addListenerOnce(\n          \"formReadyFunctionChanged\",\n          function() {\n            f = this.getFormReadyFunction();\n            if (f) {\n              f.call(this.getContext(), this._form, this);\n            }\n          },\n          this.getContext());\n      }\n\n      for (let key of Object.getOwnPropertyNames(formData)) {\n        let fieldData = formData[key];\n        let formElement = null;\n        switch (fieldData.type.toLowerCase()) {\n          case \"groupheader\":\n            this._form.addGroupHeader(fieldData.value);\n            break;\n          case \"textarea\":\n            formElement = new qx.ui.form.TextArea();\n            formElement.setHeight(fieldData.lines * 16);\n            formElement.setLiveUpdate(true);\n            break;\n          case \"textfield\":\n            formElement = new qx.ui.form.TextField();\n            if (fieldData.maxLength) {\n             formElement.setMaxLength(fieldData.maxLength);\n            }\n            formElement.setLiveUpdate(true);\n            break;\n          case \"datefield\":\n          case \"date\":\n            formElement = new qx.ui.form.DateField();\n            if (fieldData.dateFormat) {\n              formElement.setDateFormat(fieldData.dateFormat);\n            }\n            break;\n          case \"passwordfield\":\n          case \"password\":\n            formElement = new qx.ui.form.PasswordField();\n            formElement.getContentElement().setAttribute(\"autocomplete\", \"password\");\n            formElement.setLiveUpdate(true);\n            break;\n          case \"combobox\":\n            formElement = new qx.ui.form.ComboBox();\n            fieldData.options.forEach(function (item) {\n              let listItem = new qx.ui.form.ListItem(item.label, item.icon);\n              formElement.add(listItem);\n            });\n            break;\n          case \"selectbox\":\n            formElement = new qx.ui.form.SelectBox();\n            model = qx.data.marshal.Json.createModel(fieldData.options);\n            new qx.data.controller.List(model, formElement, \"label\");\n            break;\n          case \"radiogroup\":\n            formElement = new qx.ui.form.RadioGroup();\n            if (fieldData.orientation) {\n              formElement.setUserData(\"orientation\", fieldData.orientation);\n            }\n            fieldData.options.forEach(function (item) {\n              let radioButton = new qx.ui.form.RadioButton(item.label);\n              radioButton.setUserData(\n              \"value\",\n              item.value !== undefined ? item.value : item.label\n              );\n              formElement.add(radioButton);\n            }, this);\n            break;\n          case \"label\":\n            formElement = new qx.ui.form.TextField(); // dummy\n            formElement.setUserData(\"excluded\", true);\n            break;\n          case \"checkbox\":\n            formElement = new qx.ui.form.CheckBox(fieldData.label);\n            break;\n          case \"spinner\":\n            formElement = new qx.ui.form.Spinner();\n            if (fieldData.min) {\n              formElement.setMinimum(fieldData.min);\n            }\n            if (fieldData.max) {\n              formElement.setMaximum(fieldData.max);\n            }\n            if (fieldData.step) {\n              formElement.setSingleStep(fieldData.step);\n            }\n            if (fieldData.fractionsDigits) {\n              let fd = fieldData.fractionsDigits;\n              let nf = new qx.util.format.NumberFormat();\n              if (fd.min) {\n                nf.setMinimumFractionDigits(fd.min);\n              }\n              if (fd.max) {\n                nf.setMaximumFractionDigits(fd.max);\n              }\n              formElement.setNumberFormat(nf);\n            }\n            break;\n          case \"list\":\n            formElement = new qx.ui.form.List();\n            if (fieldData.selectionMode)\n            {\n              formElement.setSelectionMode(fieldData.selectionMode);\n            }\n            if (fieldData.dragSelection)\n            {\n              var mode = formElement.getSelectionMode();\n              if (mode == \"single\" || mode == \"one\")\n              {\n                this.debug(\"Drag selection not available in \" + mode);\n              }\n              else\n              {\n                formElement.setDragSelection(fieldData.dragSelection);\n              }\n            }\n            model = qx.data.marshal.Json.createModel( fieldData.options );\n            new qx.data.controller.List( model, formElement, \"label\");\n            break;\n          default:\n            this.error(\"Invalid form field type:\" + fieldData.type);\n        }\n        formElement.setUserData(\"key\", key);\n        let _this = this;\n        if (typeof fieldData.type == \"string\") {\n          switch (fieldData.type.toLowerCase()) {\n            case \"textarea\":\n            case \"textfield\":\n            case \"passwordfield\":\n            case \"combobox\":\n            case \"datefield\":\n            case \"spinner\":\n              this._formController.addTarget(formElement, \"value\", key, true, null, {\n                converter: function (value) {\n                  _this._form.getValidationManager().validate();\n                  return value;\n                }\n              });\n              break;\n            case \"checkbox\":\n              this._formController.addTarget(formElement, \"value\", key, true, null);\n              break;\n            case \"selectbox\":\n              this._formController.addTarget(formElement, \"selection\", key, true, {\n                converter: qx.lang.Function.bind(function (value) {\n                  let selected = null;\n                  let selectables = this.getSelectables();\n                  selectables.forEach(function (selectable) {\n                    if (selectable.getModel().getValue() === value) {\n                      selected = selectable;\n                    }\n                  }, this);\n                  if (!selected) {\n                    return [selectables[0]];\n                  }\n                  return [selected];\n                }, formElement)\n              }, {\n                converter: qx.lang.Function.bind(function (selection) {\n                  let value = selection[0].getModel().getValue();\n                  return value;\n                }, formElement)\n              });\n              break;\n            case \"radiogroup\":\n              this._formController.addTarget(formElement, \"selection\", key, true, {\n                converter: qx.lang.Function.bind(function (value) {\n                  let selectables = this.getSelectables();\n                  let selection = [];\n                  if (value) {\n                    selectables.forEach(function (selectable) {\n                      let sValue = selectable.getUserData(\"value\");\n                      if (sValue === value) {\n                        selection = [selectable];\n                      }\n                    }, this);\n                  }\n                  return selection;\n                }, formElement)\n              }, {\n                converter: function (selection) {\n                  let value = selection[0].getUserData(\"value\");\n                  return value;\n                }\n              });\n              break;\n\n          case \"list\":\n            this._formController.addTarget(\n              formElement, \"selection\", key, true, {\n                \"converter\" : qx.lang.Function.bind( function( value ) {\n                  var selected=[];\n                  var selectables = this.getSelectables();\n                  selectables.forEach( function( selectable ) {\n                    if ((value instanceof Array ||\n                         value instanceof qx.data.Array) &&\n                        value.includes(selectable.getModel().getValue())) {\n                      selected.push(selectable);\n                    }\n                  }, this );\n\n                  return selected;\n                }, formElement)\n              },{\n                \"converter\" : qx.lang.Function.bind( function( selection ) {\n                  var value = [];\n                  selection.forEach( function ( selected ) {\n                    value.push(selected.getModel().getValue());\n                  });\n                  return value;\n                }, formElement)\n              }\n            );\n            break;\n          }\n        }\n\n        /**\n         * Validation\n         */\n        let validator = null;\n        if (formElement && fieldData.validation) {\n          // required field\n          if (fieldData.validation.required) {\n            formElement.setRequired(true);\n          }\n          // sync validation\n          if (fieldData.validation.validator) {\n            validator = fieldData.validation.validator;\n            if (typeof validator == \"string\") {\n              if (qx.util.Validate[validator]) {\n                validator = qx.util.Validate[validator]();\n              } else if (validator.charAt(0) === \"/\") {\n                validator = qx.util.Validate.regExp(\n                new RegExp(validator.substr(1, validator.length - 2)),\n                fieldData.validation.errorMessage\n                );\n              } else {\n                this.error(\"Invalid string validator.\");\n              }\n            } else if (!(validator instanceof qx.ui.form.validation.AsyncValidator) && typeof validator !== \"function\") {\n              this.error(\"Invalid validator.\");\n            }\n          }\n          // async validation\n          if (qx.lang.Type.isString(fieldData.validation.proxy) &&\n          qx.lang.Type.isString(fieldData.validation.method)\n          ) {\n            /**\n             * fieldData.validation.proxy\n             * the name of a global variable (or path) to a function that acts as the proxy of\n             * the 'send' or 'execute' function of a preconfigured JsonRpc client. The function\n             * receives the following parameters: service method (string), parameters (array)\n             * and callback (function). It proxies the parameters to the given JsonRpc method and\n             * calls the callback with the result (true if valid, false if not) received from the\n             * server. The JsonRpc service name is preconfigured by the server and cannot be\n             * changed by the client.\n             */\n            // clean\n            let proxy = fieldData.validation.proxy.replace(/;\\n/g, \"\");\n            try {\n              eval(\"proxy = \" + proxy + \";\");\n            } catch (e) {\n              this.warn(\"Invalid proxy name\");\n            }\n            if (typeof proxy == \"function\") {\n              let method = fieldData.validation.method;\n              let message = fieldData.validation.invalidMessage;\n              let validationFunc = function (validatorObj, value) {\n                if (!validatorObj.__asyncInProgress) {\n                  validatorObj.__asyncInProgress = true;\n                  proxy(method, [value], function (valid) {\n                    validatorObj.setValid(valid, message || this.tr(\"Value is invalid\"));\n                    validatorObj.__asyncInProgress = false;\n                  });\n                }\n              };\n              validator = new qx.ui.form.validation.AsyncValidator(validationFunc);\n            }\n          }\n        }\n\n        /**\n         * other widget properties @todo: allow to set all properties\n         */\n\n        // width\n        if (fieldData.width !== undefined) {\n          formElement.setWidth(fieldData.width);\n        }\n\n        // placeholder\n        if ( fieldData.placeholder !== undefined ) {\n          formElement.setPlaceholder( fieldData.placeholder );\n        }\n\n        // tooltip\n        if ( fieldData.toolTipText !== undefined ) {\n          formElement.setToolTipText( fieldData.toolTipText );\n        }\n\n        // enabled\n        if (fieldData.enabled !== undefined) {\n          formElement.setEnabled(fieldData.enabled);\n        }\n\n        // generic property setter\n        if ( typeof fieldData.properties == \"object\") {\n          formElement.set( fieldData.properties );\n        }\n\n        /*\n         * This allows changing the default autocomplete behavior to disable\n         * autocomplete on all text and password fields unless allowed at\n         * either the form level or at the field level using the\n         * allowBrowserAutocomplete key.\n         */\n        if ([\n              \"textfield\",\n              \"passwordfield\"\n            ].includes( fieldData.type.toLowerCase()) ) {\n\n          if ( typeof fieldData.allowBrowserAutocomplete == \"boolean\" ) {\n            if ( ! fieldData.allowBrowserAutocomplete ) {\n              //turn off autocomplete\n              formElement.getContentElement().setAttribute(\n              \"autocomplete\", \"new-password\");\n            } else {\n              // leave autocomplete alone.\n              // Note: Password field above sets attribute\n            }\n          } else if ( ! this.getAllowBrowserAutocomplete() ) {\n            //turn off autocomplete\n            formElement.getContentElement().setAttribute(\n              \"autocomplete\", \"new-password\");\n          }\n        }\n\n         // generic userdata settings\n        if ( typeof fieldData.userdata == \"object\" ) {\n          Object.keys( fieldData.userdata ).forEach(\n            function(key) {\n              formElement.setUserData(key, fieldData.userdata[key]);\n            });\n        }\n\n        /**\n         * Events\n         */\n        if (qx.lang.Type.isObject(fieldData.events)) {\n          for (let type in fieldData.events) {\n            let func;\n            try {\n              switch(typeof fieldData.events[type]) {\n              case \"string\" : /** @deprecated */\n                // A string allows transferring this handler via JSON.\n                func = eval(\"(\" + fieldData.events[type] + \")\"); // eval is evil, I know.\n                break;\n\n              case \"function\" :\n                func = fieldData.events[type];\n                break;\n\n              default :\n                throw new Error(\"Event handler must be a string eval()'ed to a function (deprecated), or a function\");\n              }\n              formElement.addListener(type, func, formElement);\n            } catch (e) {\n              this.warn(\"Invalid '\" + type + \"' event handler for form element '\" + key + \"'.\");\n            }\n          }\n        }\n\n        // Putting it all together\n        let label = fieldData.label;\n        label && this._form.add(formElement, label, validator);\n        // Add the form elements as objects owned by the form widget\n        if (qx.core.Environment.get(\"module.objectid\") === true) {\n          formElement.setQxObjectId(key);\n          this._form.addOwnedQxObject(formElement);\n        }\n\n        /*\n         * add the form element to the map so the user has access to it later\n         */\n        if (! this._formElements) {\n          // KLUDGE for issue #10068: The constructor of this mixin\n          // isn't being called earlier enough.\n          this._init();\n        }\n        this._formElements[key] = formElement;\n      }\n\n\n      /*\n       * render the form\n       */\n      var setupFormRenderer;\n\n      setupFormRenderer = this.getSetupFormRendererFunction();\n      if (! setupFormRenderer)\n      {\n        setupFormRenderer = function(form)\n        {\n          var view;\n\n          view = new qxl.dialog.FormRenderer(this._form);\n          view.getLayout().setColumnFlex(0, 0);\n          view.getLayout().setColumnMaxWidth(0, this.getLabelColumnWidth());\n          view.getLayout().setColumnWidth(0, this.getLabelColumnWidth());\n          view.getLayout().setColumnFlex(1, 1);\n          view.setAllowGrowX(true);\n\n          return view;\n        };\n      }\n\n      this._formContainer.add( setupFormRenderer.bind(this)(this._form) );\n      this._form.getValidationManager().validate();\n    },\n\n    /**\n     * Constructs the form on-the-fly\n     * @param formData {Map} The form data map\n     * @param old {Map|null} The old value\n     */\n    _applyLabelColumnWidth : function(width, old)\n    {\n      var view;\n\n      // If the form renderer is the default one and has already been applied...\n      if (! this.getSetupFormRendererFunction() &&\n          this._formContainer &&\n          this._formContainer.getChildren().length > 0)\n      {\n        view = this._formContainer.getChildren()[0];\n        view.getLayout().setColumnWidth(0, width);\n        view.getLayout().setColumnMaxWidth(0, width);\n      }\n    },\n\n    /**\n     * Hook for subclasses to do something with the form, for example\n     * in order to attach bindings to the validation manager.\n     * Default behavior: bind the enabled state of the \"OK\" button to the\n     * validity of the current form.\n     * @param form {qx.ui.form.Form} The form to bind\n     */\n    _onFormReady: function (form) {\n      form.getValidationManager().bind(\"valid\", this._okButton, \"enabled\", {\n        converter: function (value) {\n          return value || false;\n        }\n      });\n    },\n\n    /**\n     * Handle click on ok button. Calls callback with the result map\n     * @override\n     */\n    _handleOk: function () {\n      this.hide();\n      if (this.getCallback()) {\n        this.getCallback().call(\n        this.getContext(),\n        qx.util.Serializer.toNativeObject(this.getModel())\n        );\n      }\n      this.resetCallback();\n    }\n  }\n});\n"
  ]
}